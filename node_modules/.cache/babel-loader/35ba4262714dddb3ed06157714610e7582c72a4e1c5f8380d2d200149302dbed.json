{"ast":null,"code":"var _jsxFileName = \"/Users/nico90/countries-app/src/pages/Details.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Details() {\n  _s();\n  const {\n    country\n  } = useParams();\n  const [countryInfo, setCountryInfo] = useState(null);\n  useEffect(() => {\n    // Lógica para cargar los detalles del país según el nombre pasado en la ruta\n    // Por ejemplo, puedes hacer otra solicitud a la API usando el nombre del país\n    const fetchCountryInfo = async () => {\n      try {\n        const response = await fetch(`http://localhost:4040/api/countries/${encodeURIComponent(country)}`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const countryData = await response.json();\n        setCountryInfo(countryData);\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    };\n    fetchCountryInfo();\n  }, [country]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: countryInfo ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: countryInfo.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Capital: \", countryInfo.capital]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Population: \", countryInfo.population]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Cargando detalles del pa\\xEDs...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(Details, \"q4vls0nCZZyclpQyJLcy0QNywE8=\", false, function () {\n  return [useParams];\n});\n_c = Details;\nexport default Details;\nvar _c;\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"names":["useEffect","useState","useParams","jsxDEV","_jsxDEV","Details","_s","country","countryInfo","setCountryInfo","fetchCountryInfo","response","fetch","encodeURIComponent","ok","Error","countryData","json","error","console","children","name","fileName","_jsxFileName","lineNumber","columnNumber","capital","population","_c","$RefreshReg$"],"sources":["/Users/nico90/countries-app/src/pages/Details.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nfunction Details() {\n  const { country } = useParams();\n  const [countryInfo, setCountryInfo] = useState(null);\n\n  useEffect(() => {\n    // Lógica para cargar los detalles del país según el nombre pasado en la ruta\n    // Por ejemplo, puedes hacer otra solicitud a la API usando el nombre del país\n    const fetchCountryInfo = async () => {\n      try {\n        const response = await fetch(`http://localhost:4040/api/countries/${encodeURIComponent(country)}`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const countryData = await response.json();\n        setCountryInfo(countryData);\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    };\n\n    fetchCountryInfo();\n  }, [country]);\n\n  return (\n    <div>\n      {/* Contenido de los detalles del país */}\n      {countryInfo ? (\n        <div>\n          <h2>{countryInfo.name}</h2>\n          <p>Capital: {countryInfo.capital}</p>\n          <p>Population: {countryInfo.population}</p>\n          {/* Puedes mostrar más detalles aquí */}\n        </div>\n      ) : (\n        <p>Cargando detalles del país...</p>\n      )}\n    </div>\n  );\n}\n\nexport default Details;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM;IAAEC;EAAQ,CAAC,GAAGL,SAAS,CAAC,CAAC;EAC/B,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAMU,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,uCAAsCC,kBAAkB,CAACN,OAAO,CAAE,EAAC,CAAC;QAClG,IAAI,CAACI,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,MAAMC,WAAW,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QACzCR,cAAc,CAACO,WAAW,CAAC;MAC7B,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF,CAAC;IAEDR,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACH,OAAO,CAAC,CAAC;EAEb,oBACEH,OAAA;IAAAgB,QAAA,EAEGZ,WAAW,gBACVJ,OAAA;MAAAgB,QAAA,gBACEhB,OAAA;QAAAgB,QAAA,EAAKZ,WAAW,CAACa;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC3BrB,OAAA;QAAAgB,QAAA,GAAG,WAAS,EAACZ,WAAW,CAACkB,OAAO;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrCrB,OAAA;QAAAgB,QAAA,GAAG,cAAY,EAACZ,WAAW,CAACmB,UAAU;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAExC,CAAC,gBAENrB,OAAA;MAAAgB,QAAA,EAAG;IAA6B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACpC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACnB,EAAA,CAtCQD,OAAO;EAAA,QACMH,SAAS;AAAA;AAAA0B,EAAA,GADtBvB,OAAO;AAwChB,eAAeA,OAAO;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}