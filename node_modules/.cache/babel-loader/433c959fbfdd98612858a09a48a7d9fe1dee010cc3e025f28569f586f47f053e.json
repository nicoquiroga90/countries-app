{"ast":null,"code":"var _jsxFileName = \"/Users/nico90/countries-app/src/pages/Main.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"../componets/Main/SearchCountry\";\nimport Countries from \"../componets/Main/Countries\";\nimport RegionFilter from \"../componets/Main/RegionFilter\";\nimport \"../styles/Main.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Main() {\n  _s();\n  const [countryList, setCountryList] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [regions, setRegions] = useState([]);\n  const [selectedRegion, setSelectedRegion] = useState(\"All\");\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:4040/api/countries\");\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const countries = await response.json();\n        setCountryList(countries);\n        const uniqueRegions = Array.from(new Set(countries.map(country => country.region)));\n        setRegions(uniqueRegions);\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleSearch = e => {\n    setSearchTerm(e.target.value);\n  };\n  const handleSelectRegion = region => {\n    setSelectedRegion(region);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters-conteiner\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        searchTerm: searchTerm,\n        onSearchChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RegionFilter, {\n        regions: regions,\n        selectedRegion: selectedRegion,\n        onSelectRegion: handleSelectRegion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Countries, {\n      countryList: countryList,\n      searchTerm: searchTerm,\n      selectedRegion: selectedRegion,\n      renderCountry: country => /*#__PURE__*/_jsxDEV(Link, {\n        to: `/details/${country.name}`,\n        children: country.name\n      }, country.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(Main, \"CN3X/4YKPA/ODJUE4+6rxbjh0aA=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["useEffect","useState","Link","SearchBar","Countries","RegionFilter","jsxDEV","_jsxDEV","Main","_s","countryList","setCountryList","searchTerm","setSearchTerm","regions","setRegions","selectedRegion","setSelectedRegion","fetchData","response","fetch","ok","Error","countries","json","uniqueRegions","Array","from","Set","map","country","region","error","console","handleSearch","e","target","value","handleSelectRegion","className","children","onSearchChange","fileName","_jsxFileName","lineNumber","columnNumber","onSelectRegion","renderCountry","to","name","_c","$RefreshReg$"],"sources":["/Users/nico90/countries-app/src/pages/Main.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport SearchBar from \"../componets/Main/SearchCountry\";\nimport Countries from \"../componets/Main/Countries\";\nimport RegionFilter from \"../componets/Main/RegionFilter\";\nimport \"../styles/Main.css\";\n\nfunction Main() {\n  const [countryList, setCountryList] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [regions, setRegions] = useState([]);\n  const [selectedRegion, setSelectedRegion] = useState(\"All\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:4040/api/countries\");\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const countries = await response.json();\n        setCountryList(countries);\n\n        const uniqueRegions = Array.from(new Set(countries.map((country) => country.region)));\n        setRegions(uniqueRegions);\n        \n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleSearch = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  const handleSelectRegion = (region) => {\n    setSelectedRegion(region);\n  };\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"filters-conteiner\">\n        <SearchBar searchTerm={searchTerm} onSearchChange={handleSearch} />\n        <RegionFilter\n          regions={regions}\n          selectedRegion={selectedRegion}\n          onSelectRegion={handleSelectRegion}\n        />\n      </div>\n      <Countries\n        countryList={countryList}\n        searchTerm={searchTerm}\n        selectedRegion={selectedRegion}\n        renderCountry={(country) => (\n          <Link to={`/details/${country.name}`} key={country.name}>\n            {/* Aquí renderiza la información del país */}\n            {country.name}\n          </Link>\n        )}\n      />\n    </div>\n  );\n}\n\nexport default Main;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}